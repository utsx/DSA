version: '3.7'

services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    container_name: kafka
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - network

  kafka2:
    container_name: kafka2
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29093:29092
    hostname: kafka2
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - network

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "9000:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092,kafka2:29093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    links:
      - kafka
      - kafka2
      - zookeeper
    networks:
      - network

  server:
    image: 'server'
    container_name: listener
    build:
      context: .
      dockerfile: server/Dockerfile
    ports:
      - '8080:8080'
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: 'kafka:29092,kafka2:29093'
    depends_on:
      - kafka-ui
    networks:
      - network

  car1:
    image: 'client'
    container_name: polo
    build:
      context: .
      dockerfile: client/Dockerfile
    ports:
      - '9081:9081'
    environment:
      APP_SERVER_ADDRESS: 'server:8080'
      CAR_IMEI: 'ccbfa71e-2d26-47bd-b72b-d57a29f9e878'
    depends_on:
      - server
    networks:
      - network

  car2:
    image: 'client'
    container_name: solaris
    build:
      context: .
      dockerfile: client/Dockerfile
    ports:
      - '9082:9082'
    environment:
      APP_SERVER_ADDRESS: 'server:8080'
      CAR_IMEI: '8c2d7c19-42ff-414b-8f93-600d0abb0c13'
    depends_on:
      - server
    networks:
      - network

  flink-jobmanager:
    image: flink:latest
    container_name: flink-jobmanager
    ports:
      - "8081:8081"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    command: jobmanager
    depends_on:
      - zookeeper
      - kafka
    networks:
      - network

  aggregator:
    image: 'aggregator'
    container_name: aggregator
    build:
      context: .
      dockerfile: aggregator/Dockerfile
    environment:
      REDIS_HOST : redis
      REDIS_PORT : 6379
    depends_on:
      - redis
      - flink-jobmanager
    networks:
      - network

  external-api:
    image: 'external-api'
    container_name: external-api
    ports:
      - '9001:8080'
    build:
      context: .
      dockerfile: external-api/Dockerfile
    environment:
      REDIS_HOST: 'redis'
      REDIS_PORT: '6379'
    depends_on:
      - redis
    networks:
      - network


  data-transfer:
    image: 'data-transfer'
    container_name: data-transfer
    build:
      context: .
      dockerfile: data-transfer/Dockerfile
    ports:
      - '9002:8080'
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: 'kafka:29092,kafka2:29093'
      REDIS_HOST: 'redis'
      REDIS_PORT: '6379'
    depends_on:
      - redis
    networks:
      - network

networks:
  network:
    driver: bridge
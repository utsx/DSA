version: '3.7'

services:
  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - network

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_NUM_PARTITIONS: 6
    networks:
      - network

  kafka2:
    image: 'confluentinc/cp-kafka:latest'
    container_name: kafka2
    depends_on:
      - zookeeper
    ports:
      - '9093:9093'
      - '29093:29093'
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka2:9093,PLAINTEXT_HOST://localhost:29093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_NUM_PARTITIONS: 6
    networks:
      - network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - '9000:8080'
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: 'first'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:9092'
      KAFKA_CLUSTERS_1_NAME: 'second'
      KAFKA_CLUSTERS_1_BOOTSTRAPSERVERS: 'kafka2:9093'
    links:
      - kafka
      - kafka2
      - zookeeper
    networks:
      - network

  server:
    image: 'server'
    container_name: listener
    build:
      context: .
      dockerfile: server/Dockerfile
    ports:
      - '8080:8080'
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: 'kafka:9092,kafka2:9093'
    depends_on:
      - kafka-ui
    networks:
      - network

  car1:
    image: 'client'
    container_name: polo
    build:
      context: .
      dockerfile: client/Dockerfile
    ports:
      - '8081:8081'
    environment:
      APP_SERVER_ADDRESS: 'server:8080'
      CAR_IMEI: 'ccbfa71e-2d26-47bd-b72b-d57a29f9e878'
    depends_on:
      - server
    networks:
      - network

  car2:
    image: 'client'
    container_name: solaris
    build:
      context: .
      dockerfile: client/Dockerfile
    ports:
      - '8082:8082'
    environment:
      APP_SERVER_ADDRESS: 'server:8080'
      CAR_IMEI: '8c2d7c19-42ff-414b-8f93-600d0abb0c13'
    depends_on:
      - server
    networks:
      - network

  car3:
    image: 'client'
    container_name: coolray
    build:
      context: .
      dockerfile: client/Dockerfile
    ports:
      - '8083:8083'
    environment:
      APP_SERVER_ADDRESS: 'server:8080'
      CAR_IMEI: 'a801d3b5-d44c-4b8a-a622-6c52102db013'
    depends_on:
      - server
    networks:
      - network

networks:
  network:
    driver: bridge